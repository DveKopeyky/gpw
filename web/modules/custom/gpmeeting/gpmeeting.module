<?php
/**
 * @file
 * Contains gpmeeting.module.
 */

use Drupal\eck\EckEntityInterface;
use Drupal\node\NodeInterface;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\views\ViewExecutable;
/**
 * Implements hook_ENTITY_TYPE_view_alter().
 */
function gpmeeting_child_entity_view_alter(array &$build, EckEntityInterface $entity, EntityViewDisplayInterface $display) {
  if ($entity->bundle() == 'meeting_report' && !empty($build['field_file'][0]['#file']) && !empty($build['field_language_list'][0]['#markup'])) {
    $build['field_file'][0]['#description'] = $build['field_language_list'][0]['#markup'];
  }
}

/**
 * Implements hook_ENTITY_TYPE_view_alter().
 */
function gpmeeting_node_view_alter(array &$build, NodeInterface $node, EntityViewDisplayInterface $display) {
  if ($node->bundle() == 'webinar' && $build['#view_mode'] == 'teaser') {
    $build['location'] = [
      '#prefix' => '<div class="field"><p class="address">',
      '#suffix' => '</p></div>',
      '#markup' => t('Online'),
      '#weight' => -1,
    ];
    if (!empty($node->field_video->getValue())) {
      $build['view_recording'] = $node->toLink(t('View recording'), 'canonical', ['attributes' => ['class' => ['view-recording-link', 'btn', 'btn-outline']]])->toRenderable();
    }
  }
  elseif ($node->bundle() == 'meeting' && $build['#view_mode'] == 'full' && !empty($build['title'][0]['#context']['value'])) {
    $build['title'][0]['#context']['value'] .= sprintf(' - %s', t('Agenda and Documents'));
  }
}

function gpmeeting_views_pre_view(ViewExecutable $view, $display_id, array &$args) {
  if ($view->id() == 'meetings' && $display_id === 'page_1') {
    $headerContent = [
      '#theme' => 'next_meetings_header',
    ];
    $options = array(
      'id' => 'area_next_meetings_header',
      'table' => 'views',
      'field' => 'area',
      'relationship' => 'none',
      'group_type' => 'none',
      'admin_label' => '',
      'empty' => TRUE,
      'tokenize' => FALSE,
      'content' => array(
        'value' => \Drupal::service('renderer')->render($headerContent),
        'format' => 'full_html',
      ),
      'plugin_id' => 'text',
    );
    $view->setHandler($display_id, 'header', 'area_next_meetings_header', $options);
  }
}

/**
 * Implements hook_theme().
 */
function gpmeeting_theme($existing, $type, $theme, $path) {
  return [
      'next_meetings_header' => [
        'variables' => []
      ],
      'address_gpw' => [
        'variables' => [
          'address_line1' => '',
          'locality' => [],
          'country' => [],
        ],
      ],
    ];
}

/**
 * Implements hook_views_pre_render().
 */
function gpmeeting_views_pre_render(ViewExecutable $view) {
  if ($view->id() == 'agenda_items' && $view->current_display == 'block_1') {
    if (empty($view->result)) {
      return;
    }
    $row1 = reset($view->result);
    $meeting = $row1->_relationship_entities['reverse__node__field_agenda_items'];
    if (empty($meeting->field_agenda_items->entity)) {
      return;
    }

    $agenda_items = $meeting->field_agenda_items->getValue();

    // Remove duplicates.
    $ids = [];
    foreach($view->result as $key => $result) {
      if (!in_array($result->_entity->id(), $ids)) {
        $ids[] =$result->_entity->id();
      } else {
        unset($view->result[$key]);
      }
    }

    // Order agenda items by their weight inside the parent meeting.
    usort($view->result, function($a, $b) use ($agenda_items) {
      foreach ($agenda_items as $agenda_item) {
        if ($agenda_item['target_id'] == $a->_entity->id()) {
          return -1;
        }
        elseif ($agenda_item['target_id'] == $b->_entity->id()) {
          return 1;
        }
      }
      return 0;
    });
  }
}
