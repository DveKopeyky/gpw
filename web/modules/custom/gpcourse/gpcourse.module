<?php

/**
 * @file
 * Contains gpcourse.module.
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\eck\EckEntityInterface;
use Drupal\node\NodeInterface;
use Drupal\eck\Entity\EckEntity;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;

/**
 * Implements hook_help().
 */
function gpcourse_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the gpcourse module.
    case 'help.page.gpcourse':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Holds functionalities regarding course entities') . '</p>';
      return $output;

    default:
      return '';
  }
}

function _gpcourse_course_section_update_parent_course(EckEntityInterface $entity) {
  /** @var \Drupal\gpbase\UtilsServiceInterface $utils */
  $utils = \Drupal::service('gpbase.utils');
  $result = \Drupal::entityQuery('node')
    ->condition('type', 'course')
    ->condition('field_course_sections', $entity->id())
    ->execute();
  $course = reset($result);
  if ($course instanceof NodeInterface) {
    try {
      $original = [
        'lectures_number' => $course->field_lectures_number->value,
        'duration' => $course->field_video_duration->value,
      ];
      $utils->computeCourseFields($course);
      $updated = [
        'lectures_number' => $course->field_lectures_number->value,
        'duration' => $course->field_video_duration->value,
      ];
      if ($original !== $updated) {
        $course->save();
      }
    }
    catch (\Exception $e) {
      \Drupal::logger('gpcourse')
        ->error(t('Could not compute the fields of course node (%id).', ['%id' => $course->id()]));
    }
  }
}

/**
 * Implements hook_ENTITY_TYPE_presave().
 */
function gpcourse_child_entity_presave(EckEntityInterface $entity) {
  /** @var \Drupal\gpbase\UtilsServiceInterface $utils */
  $utils = \Drupal::service('gpbase.utils');
  switch ($entity->bundle()) {
    case 'course_section':
      try {
        $utils->computeCourseSectionFields($entity);
      }
      catch (\Exception $e) {
        \Drupal::logger('gpcourse')
          ->error(t('Could not compute the fields of course_section entity (%id).', ['%id' => $entity->id()]));
      }
      break;

    case 'course_review':
      $entity->set('title', $entity->field_author_name->value);
      break;
  }
}

/**
 * Implements hook_ENTITY_TYPE_insert().
 */
function gpcourse_child_entity_insert(EckEntityInterface $entity) {
  /** @var \Drupal\gpbase\UtilsServiceInterface $utils */
  $utils = \Drupal::service('gpbase.utils');
  switch ($entity->bundle()) {
    case 'course_section':
      try {
        $utils->computeCourseSectionFields($entity);
      }
      catch (\Exception $e) {
        \Drupal::logger('gpcourse')
          ->error(t('Could not compute the fields of course_section entity (%id).', ['%id' => $entity->id()]));
      }
      _gpcourse_course_section_update_parent_course($entity);
      break;

    case 'course_review':
      $entity->set('title', $entity->field_author_name->value);
      break;
  }
}

/**
 * Implements hook_ENTITY_TYPE_update().
 */
function gpcourse_child_entity_update(EckEntityInterface $entity) {
  switch ($entity->bundle()) {
    case 'course_section':
      _gpcourse_course_section_update_parent_course($entity);
      break;
  }
}

/**
 * Implements hook_ENTITY_TYPE_presave().
 */
function gpcourse_node_presave(NodeInterface $node) {
  /** @var \Drupal\gpbase\UtilsServiceInterface $utils */
  $utils = \Drupal::service('gpbase.utils');
  switch ($node->bundle()) {
    case 'course':
      try {
        $utils->computeCourseFields($node);
      }
      catch (\Exception $e) {
        \Drupal::logger('gpcourse')
          ->error(t('Could not compute the fields of course node (%id).', ['%id' => $node->id()]));
      }
      break;
  }
}

function _gpcourse_course_update_child_sections(NodeInterface $node) {
  /** @var \Drupal\gpbase\UtilsServiceInterface $utils */
  $utils = \Drupal::service('gpbase.utils');
  $sections = array_column($node->field_course_sections->getValue(), 'target_id');
  foreach ($sections as $sectionId) {
    $section = EckEntity::load($sectionId);
    try {
      $original = [
        'lectures_number' => $section->field_lectures_number->value,
        'duration' => $section->field_video_duration->value,
      ];
      $utils->computeCourseSectionFields($section);
      $updated = [
        'lectures_number' => $section->field_lectures_number->value,
        'duration' => $section->field_video_duration->value,
      ];
      if ($original !== $updated) {
        $section->save();
      }
    }
    catch (\Exception $e) {
      \Drupal::logger('gpcourse')
        ->error(t('Could not compute the fields of course_section entity (%id).', ['%id' => $section->id()]));
    }
  }
}

/**
 * Implements hook_ENTITY_TYPE_insert().
 */
function gpcourse_node_insert(NodeInterface $node) {
  /** @var \Drupal\gpbase\UtilsServiceInterface $utils */
  $utils = \Drupal::service('gpbase.utils');
  switch ($node->bundle()) {
    case 'course':
      _gpcourse_course_update_child_sections($node);
      try {
        $utils->computeCourseFields($node);
      }
      catch (\Exception $e) {
        \Drupal::logger('gpcourse')
          ->error(t('Could not compute the fields of course node (%id).', ['%id' => $node->id()]));
      }
      break;
  }
}

/**
 * Implements hook_ENTITY_TYPE_update().
 */
function gpcourse_node_update(NodeInterface $node) {
  switch ($node->bundle()) {
    case 'course':
      _gpcourse_course_update_child_sections($node);
      break;
  }
}

/**
 * Implements hook_ENTITY_TYPE_view_alter().
 */
function gpcourse_child_entity_view_alter(array &$build, EckEntityInterface $entity, EntityViewDisplayInterface $display) {
  if ($entity->bundle() == 'video' && $build['#view_mode'] == 'listing') {
    $build['title'][0]['#attributes']['class'][] = 'use-ajax';
    $build['title'][0]['#attributes']['data-dialog-type'] = 'modal';
    $build['#attached']['library'][] = 'core/drupal.ajax';
    $build['#attached']['library'][] = 'core/drupal.dialog';
    $build['#attached']['library'][] = 'core/drupal.dialog.ajax';
  }
}
